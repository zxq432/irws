               .deffile adi_defs.asm
               .deffile ddi_defs.asm
               .deffile reg_defs.asm
               .deffile sce_defs.asm
               
               ; Number of supported tasks
               .define TASK_COUNT      1
               
               ; Resource-specified definitions, if any
               ; (None)
               
               
               .segment begin "Framework"
               
               
               VectorTable:
0000 ---- 1408                         jsr         PowerUp
0001 ---- 040c                         jmp         TaskCtrlReqVector
0002 ---- 1408                         jsr         PowerUp
0003 ---- 042c                         jmp         AonRtcCh2Vector
0004 ---- 1408                         jsr         PowerUp
0005 ---- 0447                         jmp         Event0Vector
0006 ---- 1408                         jsr         PowerUp
0007 ---- 044d                         jmp         TaskAlertAckVector
               
               
               
               
               PowerUp:
                                       ; Deassert the power-down request
0008 ---- 4436                         iobclr      #0, [#IOP_WUC_PWRDWNREQ]
               
                                       ; Wait for it to take effect
0009 ---- 2437 /waitForPdAck:          iobtst      #0, [#IOP_WUC_PWRDWNACK]
000a ---- aefe                         biob1       /waitForPdAck
               
               FwEmptyFunc:            ; Done
000b ---- adb7                         rts
               
               
               
               
               TaskCtrlReqVector:
                                       ; Clear the vector flag
000c ---- 6442                         iobset      #0, [#IOP_EVCTL_VECFLAGSCLR]
               
                                       ; For each task ...
000d ---- 7000                         ld          R7, #0
               /loop:
                                           ; Save the task ID
000e ---- 7c6b                             st          R7, [#fwCtrlInt/taskId]
               
                                           ; Handle initialize request, if any
000f ---- 6872                             ld          R6, [#fwCtrlExt/bvTaskInitializeReq]
0010 ---- 0068                             ld          R0, #pFwTaskInitializeFuncTable
0011 ---- 1425                             jsr         /handleReq
               
                                           ; Handle execute request, if any
0012 ---- 6873                             ld          R6, [#fwCtrlExt/bvTaskExecuteReq]
0013 ---- 0069                             ld          R0, #pFwTaskExecuteFuncTable
0014 ---- 1425                             jsr         /handleReq
               
                                           ; Handle terminate request, if any
0015 ---- 6874                             ld          R6, [#fwCtrlExt/bvTaskTerminateReq]
0016 ---- 006a                             ld          R0, #pFwTaskTerminateFuncTable
0017 ---- 1425                             jsr         /handleReq
               
                                           ; Move on to the next task
0018 ---- 786b                             ld          R7, [#fwCtrlInt/taskId]
0019 ---- f801                             add         R7, #1
               
001a ---- fa01                         cmp         R7, #TASK_COUNT
001b ---- bef2                         bneq        /loop
               
                                       ; Update which tasks are ...
001c ---- 7870                         ld          R7, [#fwCtrlExt/bvActiveTasks]
                                       ; ... currently active ...
001d ---- 6872                         ld          R6, [#fwCtrlExt/bvTaskInitializeReq]
001e ---- fd0e                         or          R7, R6
                                       ; ... and inactive ...
001f ---- 6874                         ld          R6, [#fwCtrlExt/bvTaskTerminateReq]
0020 ---- ed92                         inv         R6
0021 ---- fd06                         and         R7, R6
0022 ---- 7c70                         st          R7, [#fwCtrlExt/bvActiveTasks]
               
                                       ; We're READY for another request
0023 ---- 642d                         iobset      #IOB_EVCTL_SWEV_READY, [#IOP_EVCTL_SWEVSET]
               
                                       ; Generate an ALERT interrupt if needed before powering back down
0024 ---- 0450                         jmp         GenAlertInterrupt;
               
               /handleReq:
                                       ; Restore the task ID, and load the function pointer (here to avoid pipeline hazard)
0025 ---- 786b                         ld          R7, [#fwCtrlInt/taskId]
0026 ---- 8f1f                         ld          R0, [R7+R0]
               
                                       ; Skip this request?
0027 ---- ed8f                         lsr         R6, R7
0028 ---- ec01                         tst         R6, #0x0001
0029 ---- be01                         bnz         /noSkip
002a ---- adb7                             rts
               /noSkip:
                                       ; Make the call by jump, with return (rts) in the "called" function
002b ---- 8db7                         jmp         R0
               
               
               
               
               AonRtcCh2Vector:
                                       ; Start clearing the RTC event
002c ---- 6630                         iobset      #IOB_WUC_WUEV_RTC, [#IOP_WUC_WUEVCLR]
               
                                       ; Clear the vector flag
002d ---- 6542                         iobset      #1, [#IOP_EVCTL_VECFLAGSCLR]
               
                                       ; For each task (R0 is the current task ID) ...
002e ---- 0000                         ld          R0, #0
               /loop:
                                           ; ... that is active ...
002f ---- 1870                             ld          R1, [#fwCtrlExt/bvActiveTasks]
0030 ---- 9d88                             lsr         R1, R0
0031 ---- 9c01                             tst         R1, #0x0001
0032 ---- b60d                             bz          /skip
               
                                               ; Fetch number of RTC intervals until next execution
0033 ---- 1067                                 ld          R1, #pFwTaskExecuteScheduleTable
0034 ---- af19                                 ld          R2, [R1+R0]
               
                                               ; If not already 0, decrement and store. If then 0 ...
0035 ---- aa00                                 cmp         R2, #0
0036 ---- b609                                 beq         /skip
0037 ---- a8ff                                 add         R2, #-1
0038 ---- af39                                 st          R2, [R1+R0]
0039 ---- be06                                 bnz         /skip
               
                                                   ; ... execute the task
003a ---- 0c6b                                     st          R0, [#fwCtrlInt/taskId]
003b ---- 8869                                     add         R0, #pFwTaskExecuteFuncTable
003c ---- 8f08                                     ld          R0, [R0]
                                                   ; Insert NOP to avoid pipeline hazard
003d ---- fd47                                     nop
003e ---- 9db7                                     jsr         R0
003f ---- 086b                                     ld          R0, [#fwCtrlInt/taskId]
               /skip:
                                           ; Move on to the next task
0040 ---- 8801                             add         R0, #1
               
0041 ---- 8a01                         cmp         R0, #TASK_COUNT
0042 ---- beec                         bneq        /loop
               
                                       ; Wait for the ACK event to be cleared
0043 ---- 262f /waitOnRtcClearing:     iobtst      #IOB_WUC_WUEV_RTC, [#IOP_WUC_WUEVFLAGS]
0044 ---- aefe                         biob1       /waitOnRtcClearing
0045 ---- 4630                         iobclr      #IOB_WUC_WUEV_RTC, [#IOP_WUC_WUEVCLR]
               
                                       ; Generate an ALERT interrupt if needed
0046 ---- 0450                         jmp         GenAlertInterrupt;
               
               
               
               
               Event0Vector:
                                       ; Disable and clear the vector flag
0047 ---- 5527                         iobclr      #IOB_EVCTL_VECCFG1_VEC2_EN, [#IOP_EVCTL_VECCFG1]
0048 ---- 6642                         iobset      #2, [#IOP_EVCTL_VECFLAGSCLR]
               
                                       ; Set the task ID
0049 ---- 0000                         ld          R0, #0
004a ---- 0c6b                         st          R0, [#fwCtrlInt/taskId]
               
                                       ; Jump to the event task code
004b ---- 140b                         jsr         FwEmptyFunc
               
                                       ; Generate an ALERT interrupt if needed
004c ---- 0450                         jmp         GenAlertInterrupt;
               
               
               
               
               TaskAlertAckVector:
                                       ; Clear the vector flag
004d ---- 6742                         iobset      #3, [#IOP_EVCTL_VECFLAGSCLR]
               
                                       ; Re-enable generation of ALERT interrupts
004e ---- 03ff                         ld          R0, #-1
004f ---- 0c6d                         st          R0, [#fwCtrlInt/alertGenMask]
               
                                       ; Fall through to GenAlertInterrupt to generate another ALERT interrupt if needed
               
               
               
               
               GenAlertInterrupt:
                                       ; Do we have any ALERT-generating flags pending?
0050 ---- 786c                         ld          R7, [#fwCtrlInt/bvTaskIoAlert]
               
                                       ; Skip if the last I/O ALERT interrupt has not been acknowledged
0051 ---- 686d                         ld          R6, [#fwCtrlInt/alertGenMask]
0052 ---- ed37                         tst         R6, R7
0053 ---- b605                         bz          /skipAlertGen
               
                                           ; Transfer I/O flags from internal to external
0054 ---- 0000                             ld          R0, #0
0055 ---- 0c6c                             st          R0, [#fwCtrlInt/bvTaskIoAlert]
0056 ---- 7c71                             st          R7, [#fwCtrlExt/bvTaskIoAlert]
               
                                           ; Generate the ALERT interrupt, and clear the generation mask
0057 ---- 652d                             iobset      #IOB_EVCTL_SWEV_ALERT, [#IOP_EVCTL_SWEVSET]
0058 ---- 0c6d                             st          R0, [#fwCtrlInt/alertGenMask]
               /skipAlertGen:
                                       ; Fall through to PowerDown ...
               
               
               
               
               PowerDown:
                                       ; If there are no unacknowledged ALERTs and no vectors pending ...
0059 ---- 786d                         ld          R7, [#fwCtrlInt/alertGenMask]
005a ---- 686e                         ld          R6, [#fwCtrlInt/alertCanPdAuxMask]
005b ---- fd0e                         or          R7, R6
005c ---- f801                         add         R7, #1 ; 0xFFFF -> 0x0000
005d ---- e92b                         in          R6, [#IOP_EVCTL_VECFLAGS]
005e ---- fd0e                         or          R7, R6
005f ---- be01                         bnz         /noPowerDown
               
                                           ; Assert the power-down request. We'll make sure that it has taken effect
                                           ; or been completely ignored when waking up again
0060 ---- 6436                             iobset      #0, [#IOP_WUC_PWRDWNREQ]
               /noPowerDown:
                                       ; Sleep until the next event
0061 ---- bdb7 sleepInstr:             sleep
               
               
               
               
0062 ---- 241a AdiDdiAcquire:          iobtst      #0, [#IOP_SMPH_SMPH0]
0063 ---- a6fe                         biob0       AdiDdiAcquire
0064 ---- adb7                         rts
               
0065 ---- 641a AdiDdiRelease:          iobset      #0, [#IOP_SMPH_SMPH0]
0066 ---- adb7                         rts
               
               
               
               
               ; RTC ticks until next execution, one word for each task
               pFwTaskExecuteScheduleTable:
0067 ---- 0000                         dw          #0
               
               ; Task code function pointers for each task code block, one word for each task
               pFwTaskInitializeFuncTable:
0068 ---- 0098                         dw          #irled/initialize
               pFwTaskExecuteFuncTable:
0069 ---- 00a0                         dw          #irled/execute
               pFwTaskTerminateFuncTable:
006a ---- 013a                         dw          #irled/terminate
               
               ; Run-time logging log requests and masks, one bit for each struct, one word for each task
               pRtlTaskLogReqTable:
               ; (Run-time logging is not used in this project)
               pRtlTaskLogMaskTable:
               ; (Run-time logging is not used in this project)
               
               
               ; Internal control data
               fwCtrlInt:
006b ---- 0000 /taskId:                dw          #0      ; ID of the currently running task
006c ---- 0000 /bvTaskIoAlert:         dw          #0x0000 ; LSB = Normal data exchange, MSB = Overflow or underflow
006d ---- ffff /alertGenMask:          dw          #0xFFFF ; Can generate an ALERT interrupt now? (0xFFFF = yes, 0x0000 = no)
006e ---- 0000 /alertCanPdAuxMask:     dw          #0x0000 ; Can power down AUX domain after ALERT interrupt generation? (0xFFFF = yes, 0x0000 = no)
006f ---- 0000 /rtlStructLockReq:      dw          #0x0000 ; Run-time logging struct lock request (0=idle -> 1=requested -> 2=ready -> access -> 0=idle)
               
               ; External control data, shared with the driver
               fwCtrlExt:
0070 ---- 0000 /bvActiveTasks:         dw          #0x0000 ; Indicates which tasks are currently active
0071 ---- 0000 /bvTaskIoAlert:         dw          #0x0000 ; LSB = Normal data exchange, MSB = Overflow or underflow
0072 ---- 0000 /bvTaskInitializeReq:   dw          #0x0000 ; Requests tasks to start
0073 ---- 0000 /bvTaskExecuteReq:      dw          #0x0000 ; Requests tasks to execute once immediately
0074 ---- 0000 /bvTaskTerminateReq:    dw          #0x0000 ; Requests tasks to stop
               
               
               .segment end "Framework"
               
               
               fwTaskDataStructures:
               .segment begin "Task: IRLED"
               irled/cfg:
               irled/cfg/bCount:
0075 ---- 0960                         dw          #2400
               irled/cfg/dCount:
0076 ---- 003c                         dw          #60
               irled/cfg/pAuxioXsVs:
0077 ---- 0004                         dw          #4
0078 ---- 0009                         dw          #9
               irled/cfg/sBreak:
0079 ---- 0001                         dw          #1
               irled/input:
               irled/output:
               irled/output/buzz:
007a ---- 0000                         dw          #0
               irled/state:
               irled/state/bCount:
007b ---- 0960                         dw          #2400
               irled/state/buzz:
007c ---- 0000                         dw          #0
               irled/state/dCount:
007d ---- 003c                         dw          #60
               irled/state/exit:
007e ---- 0000                         dw          #0
               irled/state/out:
007f ---- 0001                         dw          #1
0080 ---- 0001                         dw          #1
0081 ---- 0001                         dw          #1
0082 ---- 0001                         dw          #1
0083 ---- 0001                         dw          #1
0084 ---- 0001                         dw          #1
0085 ---- 0001                         dw          #1
0086 ---- 0001                         dw          #1
0087 ---- 0001                         dw          #1
0088 ---- 0001                         dw          #1
0089 ---- 0001                         dw          #1
008a ---- 0001                         dw          #1
008b ---- 0001                         dw          #1
008c ---- 0001                         dw          #1
008d ---- 0001                         dw          #1
008e ---- 0001                         dw          #1
008f ---- 0001                         dw          #1
0090 ---- 0001                         dw          #1
0091 ---- 0001                         dw          #1
0092 ---- 0001                         dw          #1
0093 ---- 0001                         dw          #1
0094 ---- 0001                         dw          #1
0095 ---- 0001                         dw          #1
               irled/state/td:
0096 ---- 0000                         dw          #0
               irled/state/tpo:
0097 ---- 0000                         dw          #0
               .segment end "Task: IRLED"
               
               
               .segment begin "Task: IRLED"
               irled/initialize:
               ;? gpioCfgMode(cfg.pAuxioXsVs[1], GPIO_MODE_OUTPUT);
0098 ---- 7878                         ld          R7, [#(irled/cfg/pAuxioXsVs + 1)]
0099 ---- 6000                         ld          R6, #0
009a ---- 153b                         jsr         gpioCfgMode
               ;? gpioClearOutput(cfg.pAuxioXsVs[1]);
009b ---- 7878                         ld          R7, [#(irled/cfg/pAuxioXsVs + 1)]
009c ---- 154a                         jsr         gpioClearOutput
               ;? // Schedule the first execution
               ;? fwScheduleTask(1);
009d ---- 0001                         ld          R0, #1
009e ---- 0c67                         st          R0, [#(pFwTaskExecuteScheduleTable + 0)]
               irled/initializeDone:
009f ---- adb7                         rts         
               
               
               
               
               irled/execute:
               ;? if(state.exit == 0) {
00a0 ---- 087e                         ld          R0, [#irled/state/exit]
00a1 ---- 8a00                         cmp         R0, #0
00a2 ---- b601                         beq         /br0000 ; Repaired out-of-range bneq
00a3 ---- 0534                         jmp         /id0106
               /br0000:
               ;?     gpioSetOutput(cfg.pAuxioXsVs[0]); //DIO_8 high, Power on TSOP38140 at start
00a4 ---- 7877                             ld          R7, [#(irled/cfg/pAuxioXsVs + 0)]
00a5 ---- 1552                             jsr         gpioSetOutput
               ;?     fwDelayUs(150, FW_DELAY_RANGE_1_MS); // TSOP38140 power on output stable delay 1ms, 4 covert cycles.
00a6 ---- 701d                             ld          R7, #(((150 * 24 ) + ((1 << 7) - 1)) >> 7)
00a7 ---- 6007                             ld          R6, #7
00a8 ---- 155a                             jsr         FwDelay
               ;?     //output.buzz = 0;
               ;?     //state.td = 0;
               ;?     state.tpo = 0;
00a9 ---- 0000                             ld          R0, #0
00aa ---- 0c97                             st          R0, [#irled/state/tpo]
               ;?     U16 n = 0;
00ab ---- 0000                             ld          R0, #0
               ;?     //for(U16 n=0;n<BUFFER_SIZE;n++){
               ;?     while(n<10){
               /id0116:
00ac ---- 8a0a                             cmp         R0, #10
00ad ---- a635                             bgeu        /id0117
               ;?         if(n<TPI_N) {
00ae ---- 8a06                                 cmp         R0, #6
00af ---- a60c                                 bgeu        /id0119
               ;?             gpioGenPulseTrain(AUXIO_O_LED,1,ACTIVE_DURATION,INACTIVE_DURATION,1);
00b0 ---- 5001                                     ld          R5, #1
               /id0122:
00b1 ---- 660f                                     iobset      #(10 & 0x7), [#(IOP_AIODIO0_GPIODOUT + (10 >> 3))]
00b2 ---- 1005                                     ld          R1, #(8 - 3)
00b3 ---- 8500                                     loop        R1, /id0123
00b4 ---- fd47                                     nop         
               /id0123:
00b5 ---- 460f                                     iobclr      #(10 & 0x7), [#(IOP_AIODIO0_GPIODOUT + (10 >> 3))]
00b6 ---- 111f                                     ld          R1, #(292 - 5)
00b7 ---- 8500                                     loop        R1, /id0124
00b8 ---- fd47                                     nop         
               /id0124:
00b9 ---- d8ff                                     add         R5, #-1
00ba ---- bef6                                     bnz         /id0122
               ;?         } else {
00bb ---- 04c2                                 jmp         /id0121
               /id0119:
               ;?             timer0Start(TIMER0_MODE_SINGLE, 300, 0); // half of 40khz period
00bc ---- 112c                                     ld          R1, #300
00bd ---- 9b0c                                     out         R1, [#IOP_TIMER_T0TARGET]
00be ---- 1000                                     ld          R1, #((0 << IOB_TIMER_TXCFG_PRE) | (0 * BV_TIMER_TXCFG_RELOAD))
00bf ---- 9b09                                     out         R1, [#IOP_TIMER_T0CFG]
00c0 ---- 640b                                     iobset      #0, [#IOP_TIMER_T0CTL]
               ;?             timer0Wait();
00c1 ---- cdb1                                     wev1        #WEVSEL_TIMER0
               ;?         }
               /id0121:
               ;?         gpioGetInputValue(AUXIO_I_OUT; state.out[n]);
00c2 ---- 5003                                 ld          R5, #3
00c3 ---- 1560                                 jsr         gpioGetInputValue
00c4 ---- 107f                                 ld          R1, #(irled/state/out + 0)
00c5 ---- ff39                                 st          R7, [R1+R0]
               ;?         if(state.out[n] == 0) {
00c6 ---- 107f                                 ld          R1, #(irled/state/out + 0)
00c7 ---- 9f19                                 ld          R1, [R1+R0]
00c8 ---- 9a00                                 cmp         R1, #0
00c9 ---- be08                                 bneq        /id0134
               ;?             //if(state.td == 0) {
               ;?             state.td = n;
00ca ---- 0c96                                     st          R0, [#irled/state/td]
               ;?             output.buzz = 1;
00cb ---- 1001                                     ld          R1, #1
00cc ---- 1c7a                                     st          R1, [#irled/output/buzz]
               ;?             if(cfg.sBreak == 1) {
00cd ---- 1879                                     ld          R1, [#irled/cfg/sBreak]
00ce ---- 9a01                                     cmp         R1, #1
00cf ---- be01                                     bneq        /id0140
               ;?                 n = BUFFER_SIZE;
00d0 ---- 0017                                         ld          R0, #23
               ;?             }
               /id0140:
               ;?             //}
               ;?         } else {
00d1 ---- 04db                                 jmp         /id0137
               /id0134:
               ;?             n -= 1;
00d2 ---- 88ff                                     add         R0, #-1
               ;?             if(state.out[n] == 0) {
00d3 ---- 107f                                     ld          R1, #(irled/state/out + 0)
00d4 ---- 9f19                                     ld          R1, [R1+R0]
00d5 ---- 9a00                                     cmp         R1, #0
00d6 ---- be03                                     bneq        /id0144
               ;?                 state.tpo = n + 1;
00d7 ---- 9d40                                         ld          R1, R0
00d8 ---- 9801                                         add         R1, #1
00d9 ---- 1c97                                         st          R1, [#irled/state/tpo]
               ;?             }
               /id0144:
               ;?             n += 1;
00da ---- 8801                                     add         R0, #1
               ;?         }
               /id0137:
               ;?         timer0Start(TIMER0_MODE_SINGLE, 300, 0); // half of 40khz period
00db ---- 112c                                 ld          R1, #300
00dc ---- 9b0c                                 out         R1, [#IOP_TIMER_T0TARGET]
00dd ---- 1000                                 ld          R1, #((0 << IOB_TIMER_TXCFG_PRE) | (0 * BV_TIMER_TXCFG_RELOAD))
00de ---- 9b09                                 out         R1, [#IOP_TIMER_T0CFG]
00df ---- 640b                                 iobset      #0, [#IOP_TIMER_T0CTL]
               ;?         timer0Wait();
00e0 ---- cdb1                                 wev1        #WEVSEL_TIMER0
               ;?         n += 1;
00e1 ---- 8801                                 add         R0, #1
               ;?     }
00e2 ---- 04ac                             jmp         /id0116
               /id0117:
               ;?     
               ;?     gpioClearOutput(cfg.pAuxioXsVs[0]); //Power off TSOP38140 at the end
00e3 ---- 7877                             ld          R7, [#(irled/cfg/pAuxioXsVs + 0)]
00e4 ---- 154a                             jsr         gpioClearOutput
               ;?     
               ;?     if(n == 10) {
00e5 ---- 8a0a                             cmp         R0, #10
00e6 ---- be04                             bneq        /id0156
               ;?         state.td = 0;
00e7 ---- 0000                                 ld          R0, #0
00e8 ---- 0c96                                 st          R0, [#irled/state/td]
               ;?         output.buzz = 0;
00e9 ---- 0000                                 ld          R0, #0
00ea ---- 0c7a                                 st          R0, [#irled/output/buzz]
               ;?     }
               /id0156:
               ;?     
               ;?     if(output.buzz == 1) {
00eb ---- 087a                             ld          R0, [#irled/output/buzz]
00ec ---- 8a01                             cmp         R0, #1
00ed ---- be0e                             bneq        /id0160
               ;?         if(state.buzz == 0) {
00ee ---- 087c                                 ld          R0, [#irled/state/buzz]
00ef ---- 8a00                                 cmp         R0, #0
00f0 ---- be07                                 bneq        /id0163
               ;?             cfg.dCount = 5;
00f1 ---- 0005                                     ld          R0, #5
00f2 ---- 0c76                                     st          R0, [#irled/cfg/dCount]
               ;?             state.dCount = cfg.dCount;
00f3 ---- 0876                                     ld          R0, [#irled/cfg/dCount]
00f4 ---- 0c7d                                     st          R0, [#irled/state/dCount]
               ;?             state.exit = 1;
00f5 ---- 0001                                     ld          R0, #1
00f6 ---- 0c7e                                     st          R0, [#irled/state/exit]
               ;?         } else {
00f7 ---- 04fb                                 jmp         /id0165
               /id0163:
               ;?             state.dCount -= 1;
00f8 ---- 087d                                     ld          R0, [#irled/state/dCount]
00f9 ---- 88ff                                     add         R0, #-1
00fa ---- 0c7d                                     st          R0, [#irled/state/dCount]
               ;?         }
               /id0165:
               ;?     } else {
00fb ---- 0509                             jmp         /id0162
               /id0160:
               ;?         if(state.buzz == 1) {
00fc ---- 087c                                 ld          R0, [#irled/state/buzz]
00fd ---- 8a01                                 cmp         R0, #1
00fe ---- be07                                 bneq        /id0171
               ;?             cfg.dCount = 60;
00ff ---- 003c                                     ld          R0, #60
0100 ---- 0c76                                     st          R0, [#irled/cfg/dCount]
               ;?             state.dCount = cfg.dCount;
0101 ---- 0876                                     ld          R0, [#irled/cfg/dCount]
0102 ---- 0c7d                                     st          R0, [#irled/state/dCount]
               ;?             state.exit = 1;
0103 ---- 0001                                     ld          R0, #1
0104 ---- 0c7e                                     st          R0, [#irled/state/exit]
               ;?         } else {
0105 ---- 0509                                 jmp         /id0173
               /id0171:
               ;?             state.dCount -= 1;
0106 ---- 087d                                     ld          R0, [#irled/state/dCount]
0107 ---- 88ff                                     add         R0, #-1
0108 ---- 0c7d                                     st          R0, [#irled/state/dCount]
               ;?         }
               /id0173:
               ;?     }
               /id0162:
               ;?     state.buzz = output.buzz;
0109 ---- 087a                             ld          R0, [#irled/output/buzz]
010a ---- 0c7c                             st          R0, [#irled/state/buzz]
               ;?     //        if (state.dCount == cfg.dCount) { // ADC samples block ready ...
               ;?     if(state.dCount == 0) {
010b ---- 087d                             ld          R0, [#irled/state/dCount]
010c ---- 8a00                             cmp         R0, #0
010d ---- be04                             bneq        /id0180
               ;?         state.dCount = cfg.dCount;
010e ---- 0876                                 ld          R0, [#irled/cfg/dCount]
010f ---- 0c7d                                 st          R0, [#irled/state/dCount]
               ;?         state.exit = 1;
0110 ---- 0001                                 ld          R0, #1
0111 ---- 0c7e                                 st          R0, [#irled/state/exit]
               ;?     }
               /id0180:
               ;?     if(state.bCount == cfg.bCount) {
0112 ---- 087b                             ld          R0, [#irled/state/bCount]
0113 ---- 1875                             ld          R1, [#irled/cfg/bCount]
0114 ---- 8d29                             cmp         R0, R1
0115 ---- be02                             bneq        /id0184
               ;?         state.exit = 1;
0116 ---- 0001                                 ld          R0, #1
0117 ---- 0c7e                                 st          R0, [#irled/state/exit]
               ;?     }
               /id0184:
               ;?     if(state.exit == 1) {
0118 ---- 087e                             ld          R0, [#irled/state/exit]
0119 ---- 8a01                             cmp         R0, #1
011a ---- be05                             bneq        /id0188
               ;?         state.exit = 0;  // keep going
011b ---- 0000                                 ld          R0, #0
011c ---- 0c7e                                 st          R0, [#irled/state/exit]
               ;?         fwGenAlertInterrupt(); // Generate ALERT interrupt
011d ---- 086c                                 ld          R0, [#fwCtrlInt/bvTaskIoAlert]
011e ---- 8201                                 or          R0, #(1 << 0)
011f ---- 0c6c                                 st          R0, [#fwCtrlInt/bvTaskIoAlert]
               ;?     }
               /id0188:
               ;?     if(output.buzz == 1) {
0120 ---- 087a                             ld          R0, [#irled/output/buzz]
0121 ---- 8a01                             cmp         R0, #1
0122 ---- be11                             bneq        /id0192
               ;?         timer0Start(TIMER0_MODE_PERIODICAL, 4000, 0); // 3kHz
0123 860f 03a0                                 ld          R0, #4000
0125 ---- 8b0c                                 out         R0, [#IOP_TIMER_T0TARGET]
0126 ---- 0001                                 ld          R0, #((0 << IOB_TIMER_TXCFG_PRE) | (1 * BV_TIMER_TXCFG_RELOAD))
0127 ---- 8b09                                 out         R0, [#IOP_TIMER_T0CFG]
0128 ---- 640b                                 iobset      #0, [#IOP_TIMER_T0CTL]
               ;?         for(U16 n=0;n<100;n++){
0129 ---- 0000                                 ld          R0, #0
               /id0204:
               ;?             gpioSetOutput(cfg.pAuxioXsVs[1]);
012a ---- 7878                                     ld          R7, [#(irled/cfg/pAuxioXsVs + 1)]
012b ---- 1552                                     jsr         gpioSetOutput
               ;?             timer0Wait();
012c ---- cdb1                                     wev1        #WEVSEL_TIMER0
               ;?             gpioClearOutput(cfg.pAuxioXsVs[1]);
012d ---- 7878                                     ld          R7, [#(irled/cfg/pAuxioXsVs + 1)]
012e ---- 154a                                     jsr         gpioClearOutput
               ;?             timer0Wait();
012f ---- cdb1                                     wev1        #WEVSEL_TIMER0
               ;?         }
0130 ---- 8801                                 add         R0, #1
0131 ---- 8a64                                 cmp         R0, #100
0132 ---- aef7                                 bltu        /id0204
               ;?         timer0Stop();
0133 ---- 440b                                 iobclr      #0, [#IOP_TIMER_T0CTL]
               ;?     }
               /id0192:
               ;? } //if skip == 0
               /id0106:
               ;? state.bCount += 1;
0134 ---- 087b                         ld          R0, [#irled/state/bCount]
0135 ---- 8801                         add         R0, #1
0136 ---- 0c7b                         st          R0, [#irled/state/bCount]
               ;? fwScheduleTask(1); // Schedule the next execution of the task
0137 ---- 0001                         ld          R0, #1
0138 ---- 0c67                         st          R0, [#(pFwTaskExecuteScheduleTable + 0)]
               irled/executeDone:
0139 ---- adb7                         rts         
               
               
               
               
               irled/terminate:
               irled/terminateDone:
013a ---- adb7                         rts         
               .segment end "Task: IRLED"
               
               
               .segment begin "Procedure Libary"
               ; PARAMETERS:
               ;     R7 = AUX I/O index
               ;     R6 = AUX I/O mode
               ;
               ; CLOBBERS:
               ;     R4, R5, R6, R7
               gpioCfgMode:            ; Calculate the address of the IOMODE register be modified
013b ---- dd47                         ld          R5, R7
013c ---- ddab                         lsr         R5, #3
013d ---- d810                         add         R5, #IOP_AIODIO0_IOMODE
               
                                       ; Calculate the position of the IOMODE field to be modified
013e ---- f007                         and         R7, #0x0007
               
                                       ; Shift up the selected I/O mode to the field position (2 bits per field)
013f ---- ed87                         lsl         R6, R7
0140 ---- ed87                         lsl         R6, R7
               
                                       ; Create a bit-vector to mask out the existing field value (2 bits per field)
0141 ---- 4003                         ld          R4, #0x0003
0142 ---- cd87                         lsl         R4, R7
0143 ---- cd87                         lsl         R4, R7
0144 ---- cd92                         inv         R4
               
                                       ; Modify the I/O mode register
0145 ---- ff05                         in          R7, [R5]
0146 ---- fd04                         and         R7, R4
0147 ---- fd0e                         or          R7, R6
0148 ---- ff25                         out         R7, [R5]
               
                                       ; Done
0149 ---- adb7                         rts
               
               
               
               
               ; PARAMETERS:
               ;     R7 = AUX I/O index
               ;
               ; CLOBBERS:
               ;     R5, R6, R7
               gpioClearOutput:
                                       ; Calculate the I/O register address
014a ---- ed47                         ld          R6, R7
014b ---- edab                         lsr         R6, #3
014c ---- e816                         add         R6, #IOP_AIODIO0_GPIODOUTCLR
               
                                       ; Create the bit-vector to be used for manipulation
014d ---- f007                         and         R7, #0x0007
014e ---- 5001                         ld          R5, #1
014f ---- dd87                         lsl         R5, R7
               
                                       ; Set the GPIO
0150 ---- df26                         out         R5, [R6]
0151 ---- adb7                         rts
               
               
               
               
               ; PARAMETERS:
               ;     R7 = AUX I/O index
               ;
               ; CLOBBERS:
               ;     R5, R6, R7
               gpioSetOutput:
                                       ; Calculate the I/O register address
0152 ---- ed47                         ld          R6, R7
0153 ---- edab                         lsr         R6, #3
0154 ---- e814                         add         R6, #IOP_AIODIO0_GPIODOUTSET
               
                                       ; Create the bit-vector to be used for manipulation
0155 ---- f007                         and         R7, #0x0007
0156 ---- 5001                         ld          R5, #1
0157 ---- dd87                         lsl         R5, R7
               
                                       ; Set the GPIO
0158 ---- df26                         out         R5, [R6]
0159 ---- adb7                         rts
               
               
               
               
               ; 3 + 5 CPU cycles = 16 clock cycles = 0.66 microsecond are added to the specified delay (parameter
               ; loading and timer configuration)
               ;
               ; PARAMETERS:
               ;     R7 = Delay
               ;     R6 = Prescaler exponent
               ;
               ; CLOBBERS:
               ;     R6
               FwDelay:
                                       ; Set the delay
015a ---- fb0c                         out         R7, [#IOP_TIMER_T0TARGET]
               
                                       ; Configure the timer (from clock, single-mode, prescaler exponent = R6)
015b ---- eda4                         lsl         R6, #4
015c ---- eb09                         out         R6, [#IOP_TIMER_T0CFG]
               
                                       ; Start the timer, wait for it to trigger, and stop it
015d ---- 640b                         iobset      #0, [#IOP_TIMER_T0CTL]
015e ---- cdb1                         wev1        #WEVSEL_TIMER0
015f ---- adb7                         rts
               
               
               
               
               ; PARAMETERS:
               ;     R5 = AUX I/O index
               ;
               ; CLOBBERS:
               ;     R6, R7
               gpioGetInputValue:
                                       ; Get GPIOs 15:8
0160 ---- e913                         in          R6, [#IOP_AIODIO1_GPIODIN]
0161 ---- eda0                         lsl         R6, #8
               
                                       ; Get GPIOs 7:0 and combine
0162 ---- f912                         in          R7, [#IOP_AIODIO0_GPIODIN]
0163 ---- fd0e                         or          R7, R6
               
                                       ; Move the desired GPIO pin value into bit 0 and mask
0164 ---- fd8d                         lsr         R7, R5
0165 ---- f001                         and         R7, #0x0001
0166 ---- adb7                         rts
               .segment end "Procedure Libary"
               

; Generated by T9300S08 at 2017-12-18 09:42:16.114
